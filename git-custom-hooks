#!/bin/bash
#-------------------------------------------------------------
# Greeting, motd etc. ...
#-------------------------------------------------------------

# Color definitions (taken from Color Bash Prompt HowTo).
# Some colors might look different of some terminals.
# For example, I see 'Bold Red' as 'orange' on my screen,
# hence the 'Green' 'BRed' 'Red' sequence I often use in my prompt.


# Normal Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

NC="\e[0m"               # Color Reset

SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
source $SCRIPT_DIR/figlet


get_repo_data(){
	repo_info="$(\git rev-parse --git-dir --is-inside-git-dir \
		--is-bare-repository --is-inside-work-tree \
		--short HEAD 2>/dev/null)"

	rev_parse_exit_code="$?"
	bk_repo_info=$repo_info
	short_sha=''
	if [ "$rev_parse_exit_code" = "0" ]; then
		short_sha="${repo_info##*$'\n'}"
		repo_info="${repo_info%$'\n'*}"
	fi

	inside_worktree="${repo_info##*$'\n'}"
	repo_info="${repo_info%$'\n'*}"
	bare_repo="${repo_info##*$'\n'}"
	repo_info="${repo_info%$'\n'*}"
	inside_gitdir="${repo_info##*$'\n'}"
	git_dir_path="${repo_info%$'\n'*}"
}

get_repo_data

reminder_cd() {
	builtin cd "$@" && {
		get_repo_data
		if [[ $git_dir_path == ".git" ]]
		then
			figlet -c=BRed ${PWD##*/}
		fi
	}
}

custom_git() {
	
	branch=$(\git branch | sed -n -e 's/^\* \(.*\)/\1/p')
	branch=$(echo "$branch" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g')
	
	sub_commands="^test|^merge|^commit"
	
	if [ -n $1 ]
	then 
	
		if [ -f ${git_dir_path}/hooks/pre-${1} ]
		then
			#TODO:  Do not run it if is a default git hook
			${git_dir_path}/hooks/pre-${1} "$@"
		elif [ -f ${SCRIPT_DIR}/hooks/pre-${1} ]
		then 
			${SCRIPT_DIR}/hooks/pre-${1} "$@"
		fi
		hook_exit_code="$?"
		
		if [ $hook_exit_code -eq '0' ]
		then
			\git "$@"
		fi
		
		if [ -f ${git_dir_path}/hooks/post-${1} ]
		then
			${git_dir_path}/hooks/post-${1} "$@"
		elif [ -f ${SCRIPT_DIR}/hooks/post-${1} ]
		then 
			${SCRIPT_DIR}/hooks/post-${1} "$@"
		fi
	else
		\git "$@"
	fi
	
	
}

alias git=custom_git

#cd_reminder will print the name of root folder from any git repo when you will change directory on it 
#to disable this function just comment the next line (put the # at the start of the line)
alias cd=reminder_cd

