#!/bin/bash
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# The goal of this hook is to alert the user that he want to commit some changes on production branch.
#
# To enable this hook, rename this file to "pre-commit".
#
# Color definitions (taken from Color Bash Prompt HowTo).
# Some colors might look different of some terminals.
# For example, I see 'Bold Red' as 'orange' on my screen,
# hence the 'Green' 'BRed' 'Red' sequence I often use in my prompt.

################################################################################
#######   THI IS AN EXAMPLE, YOU CAN CHANGE IT HOW TO YOU WANT  ################
################################################################################

# Normal Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

NC="\e[0m"               # Color Reset

#get the current branch
branch=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')
branch=$(echo "$branch" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g')

#if the name of branch contain "dev", that mean is develop branch and commit is ok
if [[ $branch == *"dev"* ]]
then
	COLOR="BGreen";
	printf "\n           ${!COLOR}#########################  ${branch}   #########################${NC}\n\n"
	#exit 0 mean the command can continue and don't run what is below
	exit 0

#if the name of branch is numeric that mean this branch is a local branch for a feature and commit its ok 
elif [[ $branch == [0-9]* ]]
then
	COLOR="BYellow";
	printf "\n           ${!COLOR}#########################  ${branch}   #########################${NC}\n\n"
	#exit 0 mean the command can continue and don't run what is below
	exit 0
#if the branch name do not contain dev word and is not numeric, that mean the branch is production branch 
else
	COLOR="BRed";
	printf "\n           ${!COLOR}#########################  ${branch}   #########################${NC}\n\n"
fi


branch=$(printf ${!COLOR}$branch${NC})

# Allows us to read user input below, assigns stdin to keyboard
exec < /dev/tty

#if the branch is production we ask the user if is sure to want to make commit
while true; do
  read -p "You are on branch ${branch} are you sure that you want to commit? (Y/n) " yn
  if [ "$yn" = "" ]; then
    yn='Y'
  fi
  case $yn in
      [Yy] ) exit 0; break;; #exit 0 continue with git command
      [Nn] ) printf " ${BRed} Aborted!\n ${NC}"; exit 2;;  #exit 2 stop the git execution
      * ) echo "Please answer y or n for yes or no.";;
  esac
done
